Write an operator for below use case
üß∞ Example: A Database Operator Let‚Äôs say you deploy a SampleDB Custom Resource. The Operator might:
- Create a StatefulSet for the DB
- Attach PersistentVolumes
- Run an init Job for schema setup
- Periodically trigger backup Jobs
- Handle failover or scaling events All without manual intervention.


Creating a Kubernetes Operator for `SampleDB` involves defining a **Custom Resource Definition (CRD)** and implementing a **controller** that watches for changes to `SampleDB` resources and performs the necessary actions. Below is a simplified but functional sketch using the [Operator SDK](https://dev.to/abhay_yt_52a8e72b213be229/kubernetes-operators-for-custom-applications-eg-databases-33lj).

---

## üß† Operator Architecture Overview

| Component         | Role                                                                 |
|------------------|----------------------------------------------------------------------|
| CRD              | Defines the schema for `SampleDB` resources                          |
| Controller       | Watches for `SampleDB` events and reconciles desired state           |
| Reconciliation   | Creates StatefulSet, PVCs, init Jobs, backup Jobs, and handles failover |

---

## üìÑ Step 1: Define the CRD

```yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sampledbs.example.com
spec:
  group: example.com
  names:
    kind: SampleDB
    plural: sampledbs
    singular: sampledb
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                replicas:
                  type: integer
                storageSize:
                  type: string
                version:
                  type: string
```

---

## üõ† Step 2: SampleDB Custom Resource

```yaml
apiVersion: example.com/v1
kind: SampleDB
metadata:
  name: my-db
spec:
  replicas: 3
  storageSize: 5Gi
  version: "1.0"
```

---

## ‚öôÔ∏è Step 3: Controller Logic (Pseudocode)

```go
func Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
  db := &SampleDB{}
  if err := r.Get(ctx, req.NamespacedName, db); err != nil {
    return ctrl.Result{}, client.IgnoreNotFound(err)
  }

  // 1. Create PVCs via volumeClaimTemplates
  // 2. Create StatefulSet with db.spec.replicas
  // 3. Run init Job if not already completed
  // 4. Schedule backup Job (e.g., via CronJob)
  // 5. Monitor Pod health and trigger failover if needed

  return ctrl.Result{}, nil
}
```

---

## üß± Step 4: StatefulSet Template

```yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sampledb
spec:
  serviceName: "sampledb-headless"
  replicas: 3
  selector:
    matchLabels:
      app: sampledb
  template:
    metadata:
      labels:
        app: sampledb
    spec:
      containers:
      - name: db
        image: sampledb:1.0
        volumeMounts:
        - name: data
          mountPath: /var/lib/sampledb
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
```

---

## üß™ Step 5: Init Job & Backup CronJob

### Init Job
```yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: sampledb-init
spec:
  template:
    spec:
      containers:
      - name: init
        image: sampledb-init:1.0
        command: ["sh", "-c", "init-db.sh"]
      restartPolicy: OnFailure
```

### Backup CronJob
```yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sampledb-backup
spec:
  schedule: "0 */6 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: sampledb-backup:1.0
            command: ["sh", "-c", "backup-db.sh"]
          restartPolicy: OnFailure
```

---

## üöÄ Next Steps

- Use [Kubebuilder](https://book.kubebuilder.io/) or [Operator SDK](https://sdk.operatorframework.io/) to scaffold the controller.
- Add RBAC rules to allow the Operator to manage StatefulSets, Jobs, PVCs, etc.
- Implement health checks and failover logic using Pod status and readiness probes.


